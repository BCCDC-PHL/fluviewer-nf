manifest {
  author = 'James Zlosnik (nextflow pipeline)/Kevin Kuchinski (FluViewer)'
  name = 'BCCDC-PHL/fluviewer-nf'
  version = '0.2.2'
  description = 'BCCDC-PHL FluViewer'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
    profile = false
    cache = ''
    outdir = 'results'
    fastq_input = ''
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
    primer_path = "${baseDir}/assets/"
    primers = "${baseDir}/assets/primers.fa"
    rev_primers = "${baseDir}/assets/primers_rev_comp.fa"
    pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
    pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
    run_name = parseRunName( fastq_input )
    min_depth = '10'
    min_q = '30'
    min_cov = '25'
    min_ident = '95'
    keep_interfiles = false
    h1_dataset = ''
    h3_dataset = ''
    h5_dataset = ''
    db = 'NO_FILE'
    blastx_subtype_db = "${projectDir}/assets/blastx/blastx_subtype_db.fasta"
    genoflu_cache = "${projectDir}/assets/genoflu"
    genoflu_github_url = 'https://github.com/USDA-VS/GenoFLU/'
    genoflu_version = "LATEST"
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

// this uses a regex invocation using the =~ to pull out the folder name
def parseRunName ( fastq_input ) {
    run_name = (params.fastq_input =~ /([^\/]+)\/?$/)[0][1]
    if (!run_name) {                                                         
      throw new RuntimeException("ERROR: Parsing run name from FASTQ path failed.")
    }
    return run_name
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}


def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
    conda {
	conda.enabled = true
	process.conda = "$baseDir/environments/environment.yml"
	if (params.cache) {
	    conda.cacheDir = params.cache
	}
	conda.useMamba = true
    }
}

process {
    withName: fluviewer {
	conda = "$baseDir/environments/fluviewer.yml"
	cpus = 8
    }

    withName: cutadapt {
	cpus = 8
    }

    withName: clade_calling {
	conda = "$baseDir/environments/nextclade.yml"
	cpus = 4
    }
}

report {
    enabled = true
    file = "${params.outdir}/${params.run_name}/${params.pipeline_short_name}-v${params.pipeline_minor_version}/${params.run_name}_report.html"
}

timeline {
    enabled = true
    file = "${params.outdir}/${params.run_name}/${params.pipeline_short_name}-v${params.pipeline_minor_version}/${params.run_name}_timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/${params.run_name}/${params.pipeline_short_name}-v${params.pipeline_minor_version}/${params.run_name}_trace.txt"
}
